/* *	DynImage for ActionScript 3.0 *	Copyright Â© 2010 Inlet.nl *	All rights reserved. *	 *	http://github.com/inlet/dynimage *	 *	Redistribution and use in source and binary forms, with or without *	modification, are permitted provided that the following conditions are met: *	 *	- Redistributions of source code must retain the above copyright notice, *	this list of conditions and the following disclaimer. *	 *	- Redistributions in binary form must reproduce the above copyright notice, *	this list of conditions and the following disclaimer in the documentation *	and/or other materials provided with the distribution. *	 *	- Neither the name of the Log Meister nor the names of its contributors *	may be used to endorse or promote products derived from this software *	without specific prior written permission. *	 *	 *	DynImage is free software: you can redistribute it and/or modify *	it under the terms of the GNU Lesser General Public License as published by *	the Free Software Foundation, either version 3 of the License, or *	(at your option) any later version. *	 *	DynImage is distributed in the hope that it will be useful, *	but WITHOUT ANY WARRANTY; without even the implied warranty of *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *	GNU Lesser General Public License for more details. *	 *	You should have received a copy of the GNU Lesser General Public License *	along with DynImage.  If not, see <http://www.gnu.org/licenses/>. *	 *	Version 1.0 *	 */package dynimage {	import flash.events.Event;	public class ImageEvent extends Event 	{		public static const STARTED : String = "ImageEvent.STARTED";		public static const PROGRESS : String = "ImageEvent.PROGRESS";		public static const ERROR : String = "ImageEvent.ERROR";		public static const COMPLETE : String = "ImageEvent.COMPLETE";		public var bytesLoaded : Number;		public var bytesTotal : Number;		public var errorMessage : String;		public function ImageEvent(inType : String, inBytesLoaded : uint = 0, inBytesTotal : uint = 0) 		{			super(inType, true);						bytesLoaded = inBytesLoaded;			bytesTotal = inBytesTotal;		}		override public function clone() : Event 		{			return new ImageEvent(type, bytesLoaded, bytesTotal);		}		override public function toString() : String 		{			return "ImageEvent: type[" + type + "] bytesLoaded[" + bytesLoaded + "] bytesTotal[" + bytesTotal + "] errorMessage[" + errorMessage + "]";		}	}}