package dynimage {	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;	internal class AbstractAsset extends Sprite 	{		protected var _preloader : DisplayObject;		protected var _asset : DisplayObject;				private var _autoStart : Boolean;		private var _url : String;		public function AbstractAsset(url : String, preloaderAsset : DisplayObject, autoStart : Boolean = true) 		{			_url = url;			_preloader = preloaderAsset;			_autoStart = autoStart;						placePreloader();			addEventListener(Event.REMOVED_FROM_STAGE, dispose);							if (autoStart) 			{				load();			}		}		public function load() : void 		{			animatePreloaderIn(_preloader, animatePreloaderInCompleted);		}		protected function placePreloader() : void 		{			_preloader.visible = false;			_preloader.alpha = 0;						addChild(_preloader);		}		private function loadAsset() : void 		{			ImageQueue.addEventListener(ImageLoaderEvent.COMPLETE, handleAssetLoaderEvents);			ImageQueue.addEventListener(ImageLoaderEvent.PROGRESS, handleAssetLoaderEvents);			ImageQueue.addEventListener(ImageLoaderEvent.ERROR, handleAssetLoaderEvents);			ImageQueue.addEventListener(ImageLoaderEvent.START, handleAssetLoaderEvents);			ImageQueue.loadImage(_url, this.name);		}				private function handleAssetLoaderEvents(event : ImageLoaderEvent) : void 		{			if (event.name != this.name) return;						var evt:ImageEvent;			switch (event.type) {				case ImageLoaderEvent.START:					evt = new ImageEvent(ImageEvent.STARTED);					break;				case ImageLoaderEvent.PROGRESS:					evt = new ImageEvent(ImageEvent.PROGRESS);					evt.bytesLoaded = event.loadedBytesCount;					evt.bytesTotal = event.totalBytesCount;					break;				case ImageLoaderEvent.ERROR:					evt = new ImageEvent(ImageEvent.ERROR);					evt.errorMessage = event.error;					break;			}						if (evt) dispatchEvent(evt);			if (event.type == ImageLoaderEvent.COMPLETE)			{				assetLoaded(event.asset);			}		}				private function assetLoaded(asset : DisplayObject) : void 		{			_asset = getModifiedAsset(asset);			_asset.visible = false;			_asset.alpha = 0;			addChild(_asset);								animatePreloaderOut(_preloader, animatePreloaderOutCompleted);			dispatchEvent(new ImageEvent(ImageEvent.COMPLETE));		}				protected function getModifiedAsset(asset : DisplayObject) : DisplayObject 		{			return asset;		}				override public function addEventListener(type : String, listener : Function, useCapture : Boolean = false, priority : int = 0, useWeakReference : Boolean = true) : void		{			super.addEventListener(type, listener, useCapture, priority, useWeakReference );		}				private function dispose(event:Event) : void 		{			removeEventListener(Event.REMOVED_FROM_STAGE, dispose);			ImageQueue.removeEventListener(ImageLoaderEvent.COMPLETE, handleAssetLoaderEvents);			ImageQueue.removeEventListener(ImageLoaderEvent.PROGRESS, handleAssetLoaderEvents);			ImageQueue.removeEventListener(ImageLoaderEvent.ERROR, handleAssetLoaderEvents);			ImageQueue.imageLoader.removeAsset(this.name);		}		/**		 * ------------------------------------------------------		 * ------------   ANIMATIONS TO OVERRIDE   --------------		 * ------------------------------------------------------		 */				protected function animatePreloaderIn(preloader : DisplayObject, onComplete : Function) : void 		{			preloader.visible = true;			preloader.alpha = 1;						onComplete();		}		private function animatePreloaderInCompleted() : void 		{			if (_autoStart) loadAsset( );		}
				protected function animatePreloaderOut(preloader : DisplayObject, onComplete : Function) : void 		{			preloader.visible = false;			preloader.alpha = 0;						onComplete();		}				private function animatePreloaderOutCompleted() : void 		{			animateAssetIn( _asset, function()  : void {}  );
		}
				protected function animateAssetIn(asset : DisplayObject, onComplete : Function) : void 		{			asset.visible = true;			asset.alpha = 1;						onComplete();		}		
	}}